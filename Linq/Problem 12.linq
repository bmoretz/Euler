<Query Kind="Program">
  <Connection>
    <ID>2f8c41c6-3ee3-4031-b3f5-2a47f4f9e555</ID>
    <Persist>true</Persist>
    <Server>.\SQLEXPRESS</Server>
    <Database>AdventureWorks</Database>
    <ShowServer>true</ShowServer>
  </Connection>
  <Reference>&lt;RuntimeDirectory&gt;\System.Drawing.dll</Reference>
  <Reference>&lt;RuntimeDirectory&gt;\System.Numerics.dll</Reference>
  <Namespace>System.Drawing</Namespace>
  <Namespace>System.Numerics</Namespace>
</Query>

/*

The sequence of triangle numbers is generated by adding the natural numbers.

So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 

The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
	 0: 0 = 0
	 1: 1 = 1
	 3: 1,3 = 2
	 6: 1,2,3,6 = 4
	10: 1,2,5,10 = 4
	15: 1,3,5,15 = 4
	21: 1,3,7,21 = 4
	28: 1,2,4,7,14,28 = 6
	36: 1,2,3,4,6,9,12,18,36 = 9
	45: 1,3,5,9,15,45 = 6
	55: 1,5,11,55
	
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

bool isPrime(int x)
{
	if( x == 1 ) return false;
	
	if( x < 4 ) return true;
	
	if( x % 2 == 0 ) return false;
	
	if( x < 9 )
		return true;
	
	if( x % 3 == 0 ) return false;
	
	int r = ( int )Math.Sqrt( x );
	int f = 5;
	
	while( f <= r )
	{
		if( x % f == 0 ) return false;
		if( x % ( f + 2 ) == 0 ) return false;
		
		f += 6;
	}
	
	return true;
}

int getDivisors( int n )
{
	if( n == 0 )
		return 0;
		
	if( n <= 1 )
		return 1;
		
	if( n < 4 )
		return 2;
	
	int divisors = 0;
	
	int sqrt = ( int )Math.Sqrt( n );
	
	for( int i = 1; i <= sqrt; i++ )
	{
		if( n % i == 0 )
			divisors += 2;
	}
	
	if( sqrt * sqrt == n )
		divisors--;
		
	return divisors;
}

List<int> primes = new List<int>();

void Main()
{
	primes.AddRange( Enumerable.Range(1, 65500).Where( c => isPrime( c ) ) );
	
	int n = 0;
	
	for( int i = 1; i < 15; i++ )
	{
		int divisors = getDivisors( n );
		
		Console.WriteLine( "{0} - {1}", n, divisors );
			
		n += i;
	}
}